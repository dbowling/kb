{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"MkDocs/","text":"MkDocs Site Generator \u00b6 MkDocs is a fast, simple and downright gorgeous static site generator that\u2019s geared towards building project documentation. Installation \u00b6 brew install mkdocs Configuration \u00b6 site_name : K8s Documentation site_url : https://dbowling.github.io/kb repo_url : https://github.com/umd-lib/dbowling/kb edit_uri : edit/main/docs/ docs_dir : docs theme : readthedocs Usage \u00b6 Run a server locally. It will watch your directory and rebuild the site as you make changes. mkdocs serve # Deploy to GitHub Pages mkdocs gh-deploy You can also build it to a directory and deploy it to a web server, or deploy it to GitHub Pages. Note GitHub Pages only work on paid accounts or public repositories.","title":"MkDocs Site Generator"},{"location":"MkDocs/#mkdocs-site-generator","text":"MkDocs is a fast, simple and downright gorgeous static site generator that\u2019s geared towards building project documentation.","title":"MkDocs Site Generator"},{"location":"MkDocs/#installation","text":"brew install mkdocs","title":"Installation"},{"location":"MkDocs/#configuration","text":"site_name : K8s Documentation site_url : https://dbowling.github.io/kb repo_url : https://github.com/umd-lib/dbowling/kb edit_uri : edit/main/docs/ docs_dir : docs theme : readthedocs","title":"Configuration"},{"location":"MkDocs/#usage","text":"Run a server locally. It will watch your directory and rebuild the site as you make changes. mkdocs serve # Deploy to GitHub Pages mkdocs gh-deploy You can also build it to a directory and deploy it to a web server, or deploy it to GitHub Pages. Note GitHub Pages only work on paid accounts or public repositories.","title":"Usage"},{"location":"Teller/","text":"Teller \u00b6 Teller is a command line tool to manage developer secrets. It works with many sources of secrets, including .env files, LastPass, 1Password, and Vault. Installation \u00b6 brew tap spectralops/tap && brew install teller Configuration \u00b6 To get started, we will configure a demo .env file to hold our plain text secrets and a .teller.yml file to configure teller for this project. .env example \u00b6 Create a .env file in your home directory where it is safe from version control and prying eyes. cat .env.example > ~/.env.demo chmod 0600 ~/.env.demo cat ~/.env.demo # Output DEMO = true KUBE_CONTEXT = demo PASSWORD = 123456 EMAIL = name@example.com Configure teller with .teller.yml \u00b6 Write .teller.yml in the root of your project. --- project : 2nd Brain carry_env : false providers : dotenv : env : API_PASSWORD : path : ~/.env.demo field : PASSWORD serverity : high redact_with : \"**REDACTED!**\" KUBE_CONTEXT : path : ~/.env.demo severity : none Usage \u00b6 Show the managed secrets \u00b6 $ teller show # Output -*- teller: loaded variables for 2nd Brain using .teller.yml -*- [ dotenv ~/.env.demo ] API_PASSWORD = 12 ***** [ dotenv ~/.env.demo ] KUBE_CONTEXT = de***** Summary Did you notice that Teller only imported the secrets we defined in .teller.yml ? This is a great security feature, letting you explicitly define which secrets are allowed to be used in your project. Redact secrets from logs \u00b6 We will simulate an application log tail and Teller will redact the secrets. $ ( echo 'Simulated log... 123456' && tail .env.example ) | teller redact # Output Simulated log... **REDACTED!** DEMO = true KUBE_CONTEXT = **REDACTED** PASSWORD = **REDACTED!** EMAIL = name@example.com Teller redacted the secrets that we defined in .teller.yml ! Summary Even though we defined EMAIL=name@example.com in our .env.demo file, Teller did not redact it because we did not define it in .teller.yml . Use the env_sync feature to automatically import all secrets from your .env file. Load secrets into your shell commands \u00b6 Simple load, no redaction: $ teller run -- echo \"PASSWORD: ${ API_PASSWORD } \" # Output -*- teller: loaded variables for 2nd Brain using .teller.yml -*- PASSWORD: 123456 Redact secrets: $ teller run --redact -- echo \"PASSWORD: ${ API_PASSWORD } \" # Output -*- teller: loaded variables for 2nd Brain using .teller.yml -*- PASSWORD: **REDACTED!** Use secrets in your ZSH shell functions \u00b6 I use ansible-navigator to run playbooks against our Red Hat hosts. It requires some specific environment variables to be set, so I load them on-demand with a ZSH function. # ~/.zshrc a () { eval \" $( teller sh ) \" ansible-navigator \" $@ \" } # Usage a run /path/to/playbook.yml","title":"Teller"},{"location":"Teller/#teller","text":"Teller is a command line tool to manage developer secrets. It works with many sources of secrets, including .env files, LastPass, 1Password, and Vault.","title":"Teller"},{"location":"Teller/#installation","text":"brew tap spectralops/tap && brew install teller","title":"Installation"},{"location":"Teller/#configuration","text":"To get started, we will configure a demo .env file to hold our plain text secrets and a .teller.yml file to configure teller for this project.","title":"Configuration"},{"location":"Teller/#env-example","text":"Create a .env file in your home directory where it is safe from version control and prying eyes. cat .env.example > ~/.env.demo chmod 0600 ~/.env.demo cat ~/.env.demo # Output DEMO = true KUBE_CONTEXT = demo PASSWORD = 123456 EMAIL = name@example.com","title":".env example"},{"location":"Teller/#configure-teller-with-telleryml","text":"Write .teller.yml in the root of your project. --- project : 2nd Brain carry_env : false providers : dotenv : env : API_PASSWORD : path : ~/.env.demo field : PASSWORD serverity : high redact_with : \"**REDACTED!**\" KUBE_CONTEXT : path : ~/.env.demo severity : none","title":"Configure teller with .teller.yml"},{"location":"Teller/#usage","text":"","title":"Usage"},{"location":"Teller/#show-the-managed-secrets","text":"$ teller show # Output -*- teller: loaded variables for 2nd Brain using .teller.yml -*- [ dotenv ~/.env.demo ] API_PASSWORD = 12 ***** [ dotenv ~/.env.demo ] KUBE_CONTEXT = de***** Summary Did you notice that Teller only imported the secrets we defined in .teller.yml ? This is a great security feature, letting you explicitly define which secrets are allowed to be used in your project.","title":"Show the managed secrets"},{"location":"Teller/#redact-secrets-from-logs","text":"We will simulate an application log tail and Teller will redact the secrets. $ ( echo 'Simulated log... 123456' && tail .env.example ) | teller redact # Output Simulated log... **REDACTED!** DEMO = true KUBE_CONTEXT = **REDACTED** PASSWORD = **REDACTED!** EMAIL = name@example.com Teller redacted the secrets that we defined in .teller.yml ! Summary Even though we defined EMAIL=name@example.com in our .env.demo file, Teller did not redact it because we did not define it in .teller.yml . Use the env_sync feature to automatically import all secrets from your .env file.","title":"Redact secrets from logs"},{"location":"Teller/#load-secrets-into-your-shell-commands","text":"Simple load, no redaction: $ teller run -- echo \"PASSWORD: ${ API_PASSWORD } \" # Output -*- teller: loaded variables for 2nd Brain using .teller.yml -*- PASSWORD: 123456 Redact secrets: $ teller run --redact -- echo \"PASSWORD: ${ API_PASSWORD } \" # Output -*- teller: loaded variables for 2nd Brain using .teller.yml -*- PASSWORD: **REDACTED!**","title":"Load secrets into your shell commands"},{"location":"Teller/#use-secrets-in-your-zsh-shell-functions","text":"I use ansible-navigator to run playbooks against our Red Hat hosts. It requires some specific environment variables to be set, so I load them on-demand with a ZSH function. # ~/.zshrc a () { eval \" $( teller sh ) \" ansible-navigator \" $@ \" } # Usage a run /path/to/playbook.yml","title":"Use secrets in your ZSH shell functions"}]}